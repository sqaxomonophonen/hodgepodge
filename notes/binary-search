function binary_search(A, n, T) is
    L := 0
    R := n - 1
    while L <= R do
        m := floor((L + R) / 2)
        if A[m] < T then
            L = m + 1
        else if A[m] > T then
            R = m - 1
        else:
            return m
    return unsuccessful


function binary_search_alternative(A, n, T) is
    L := 0
    R := n - 1
    while L != R do
        m := ceil((L + R) / 2)
        if A[m] > T then
            R = m - 1
        else:
            L = m
    if A[L] = T then
        return L
    return unsuccessful


function binary_search_leftmost(A, n, T):
    L := 0
    R := n
    while L < R:
        m := floor((L + R) / 2)
        if A[m] < T:
            L = m + 1
        else:
            R = m
    return L


function binary_search_rightmost(A, n, T):
    L := 0
    R := n
    while L < R:
        m := floor((L + R) / 2)
        if A[m] > T:
            R = m
        else:
            L = m + 1
    return R - 1

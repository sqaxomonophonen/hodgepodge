

6502 reference:
http://www.atariarchives.org/2bml/chapter_10.php

great 6502 reference:
http://www.obelisk.demon.co.uk/6502/addressing.html
http://www.obelisk.demon.co.uk/6502/reference.html
http://www.obelisk.demon.co.uk/6502/registers.html

memory map
http://sta.c64.org/cbm64mem.html

ROBOT CODE. orbs are not handled here



X register is most of the time set to current_robot*6 in order to point to the right variable

SPRITES used
sprite 0: zap/lazer (robots "share" it)
sprite 1: white part of upper hero body
sprite 2: black part of upper herp body?
sprite 3: black part of lower hero body
sprite 4,5,6,7: robots 


MEMORY LOCATION USED

$2112,robot_var3 - 256 bytes of robot states? table is constant
(C:$2213) m 2112 2211
>C:2112  90 81 fe 92  8f fe 91 83  99 fd 9a fb  95 a8 f8 91   ................
>C:2122  83 99 fd 9a  fb a4 95 a8  f7 93 c3 92  c1 91 65 9b   ..............e.
>C:2132  ca 1f 99 fb  45 9b c4 3f  99 fb f3 93  8f 9b fd ed   ....E..?........
>C:2142  91 1f 9b d6  98 c6 43 ab  9b d0 63 f5  45 3f 9b ca   ......C...c.E?..
>C:2152  98 c6 63 ab  9b c4 43 f5  65 e7 93 84  99 fd 65 e0   ..c...C.e.....e.
>C:2162  91 1f 9b d6  98 c6 43 ab  9b d0 63 f5  45 3f 9b ca   ......C...c.E?..
>C:2172  98 c6 63 ab  9b c4 43 f5  65 e7 80 95  65 9a e2 45   ..c...C.e...e..E
>C:2182  ec 45 97 65  97 fb 96 af  fd 96 b5 fd  91 65 03 9b   .E.e.........e..
>C:2192  c9 99 fb 45  23 9b c3 99  fb f3 95 a8  9b fc ee 93   ...E#...........
>C:21a2  c3 92 c1 91  1f 95 99 fc  45 2f 95 99  fc 65 f5 af   ........E/...e..
>C:21b2  95 9c fc 45  fc 65 f8 45  9b c3 65 9a  fa 9c c6 9c   ...E.e.E..e.....
>C:21c2  c2 93 c3 92  c1 91 1f 99  fd 45 3f 99  fd 65 f7 91   .........E?..e..
>C:21d2  1f 1f 45 3f  3f 65 f9 91  1f 99 fd 45  92 3f 99 fd   ..E??e.....E.?..
>C:21e2  65 f5 91 1f  99 fd 45 93  3f 99 fd 65  f5 45 a1 9a   e.....E.?..e.E..
>C:21f2  fd 93 3f 99  fd a1 9b fd  65 91 1f 99  fd ef 93 c3   ..?.....e.......
>C:2202  92 c1 91 1f  99 fd 95 45  95 3f 99 fd  95 65 95 f3   .......E.?...e..

... I have not noticed it changing, not even between different games.


$43FC,robot_idx1 - loaded and stored.. seems to be a 7th robot variable? might have something to do with current movement..
(C:$0efc) m 43fc
>C:43fc  c0 c6 c0 c0 (...)

$0E6C,robot_idx1 - (has something to do with sprite x MSB) contains
		   (10,20,40,80) - used together with $D010 which contains the
		   most significant X position bit for all 8 sprites
		   ...this address and the next 3 ones are probably just a
		   lookup table to address the most significant bit for the 4
		   robots
(C:$72b7) m 0e6c
>C:0e6c  10 20 40 80 (...)


ZERO PAGE VARS USED
$3f     ; hero sprite number

$44     ; 'counter' (increments for each robot sub call)
$E0     ; 'counter2' (increments each IRQ call)

$45
($45),x ; 'scr_ptr' (points to char memory)
$46

screen dump:
GSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSH
GSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSH
GSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSH
GSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSH
GSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSH
GSSSSSSSSSSSSSSSSSSSSSStsrtsrtsrSSSSSSSH
GIJKFEFEFEFEFEFEFEFSSSSwvuwvuwvuGFSSSSSH
GSSSSSSSSSSSSSSSSSSSSSSzyxzyxzyxIHSSSSSH
GSSSSSSSSSSSSSSSSSSSSSS||{||{||{KJSSSSSH
GSSSSSSSSS$#"SSSSSSSSSEFEFEFEFEFEFEFSSSH
GSSSSSSSSS'&%SSSSSSSSSSSSSSSSSSSSSSSSSSH
GSSSSSSSSS)*(SSSSSSSSSSSSSSSSSSSSSSSSSSH
GIJKFEFEFEFEFEFEFEFIJKSSWVUTSSSS1SSSSSSH
GSSSSSSSSSSSSSSSSSSSSSS^]\[ZYXS432SSSSSH
GSSSSSSSSSSSSSSSSSSSSSSEDCBA`_S765SSSSSH
GSSSSSSSSSSSSSSSSSSSSSEFEFEFEFEFEFEFIJKH
GSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSH
GSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSH
GSSSFEFEFEFEFEFEFEFIJKSSSSSSSSSSSSSSSSSH
GSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
GSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
GSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS$#"SSSSS
GSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS'&%SSSSS
GSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS)*(SSSSS
GSSSFEFEFEFEFEFEFEFSSSFEFEFEFEFEFEFEFEFE

S = space
FEFEFE = floor
IJK = lift
GH = wall

example of what $45/$46 points at.. it moves with the robot? points directly at
the floor ( second level from top, try hightlight WVUT, same level the robot is
at)
(C:$00d5) m 41f0
>C:41f0  46 45 46 49  4a 4b 53 53  57 56 55 54  53 53 53 53   FEFIJKSSWVUTSSSS
>C:4200  31 53 53 53  53 53 53 48  47 53 53 53  53 53 53 53   1SSSSSSHGSSSSSSS
>C:4210  53 53 53 53  53 53 53 53  53 53 53 53  53 53 53 5e   SSSSSSSSSSSSSSS^
>C:4220  5d 5c 5b 5a  59 58 53 34  33 32 53 53  53 53 53 48   ]\[ZYXS432SSSSSH
>C:4230  47 53 53 53  53 53 53 53  53 53 53 53  53 53 53 53   GSSSSSSSSSSSSSSS
>C:4240  53 53 53 53  53 53 53 65  64 63 62 61  60 5f 53 37   SSSSSSSedcba`_S7
>C:4250  36 35 53 53  53 53 53 48  47 53 53 53  53 53 53 53   65SSSSSHGSSSSSSS
>C:4260  53 53 53 53  53 53 53 53  53 53 53 53  53 53 45 46   SSSSSSSSSSSSSSEF
>C:4270  45 46 45 46  45 46 45 46  45 46 45 46  49 4a 4b 48   EFEFEFEFEFEFIJKH
(


$47     ; 'snooze_counter'.. robots are inactive if $47 != 0xff
$48     ; -=1 per robot? robot_idx1 (robot_index * 1)
$49     ; -=2 per robot? robot_idx2 (robot_index * 2) (used for indexing sprite x locations)
$4a     ; temp? set to 0 at top

$4b & $4c ; two robot light flash colors

$4d     ; temp?
$4e     ; temp? set to 0 at top
$4f     ; temp? set to 0 at top

$54     ; 'robot_count6' (contains number of robots*6)

$6d

$7c
$7d

$dc

$55,X   ; robot var1   
$56,X   ; robot var2   
$57,X   ; robot var3 
$58,X   ; robot var4    robot_scr_ptr
$59,X   ; robot var5    robot_scr_ptr
$5a,X   ; robot var6   

RB1     RB2     RB3     RB4
$55     $5b     $61     $67     robot_var1
$56     $5c     $62     $68     robot_var2
$57     $5d     $63     $69     robot_var3
$58     $5e     $64     $6a     robot_var4      robot_scr_ptr
$59     $5f     $65     $6b     robot_var5      robot_scr_ptr
$5a     $60     $66     $6c     robot_var6


robot_var1 $55 ---------------------------------
has something to do with the behavior to perform
after it's done with the current job.
$2112,robot_var1 points into a table

robot_var2 $56 --------------
lowest nybble (or lowest 2 bits (0x00-0x03)) seems to have something to do with speed
sometimes bit 7 sets and resets (0x80)



robot_var3 $57 ---------------------------------
some kind of STATE definer

0x00 - 0x1e: moving right (including 0xff that's 32 cycles)
0x20 - 0x3e: moving left
0x40 - 0x45: turn from right to left - 0x45=start
0x60 - 0x65; turn from left to right - 0x65=start
0x63-0x60,0xff,0xab-0xa0,0xff,0x63-0x60 - look over shoulder <- left
0x94: zapping
0x95: zapping
0xff: job done

robot_var4 and 5 $58,$59 --------------------------------
something with pointing into the $4000-$4400 screen buffer?
 seems to be coupled with $45,$46, then again used as ($45),y
 most likely used for "collision" detection with floor (move until stopped by lift)

both together is called 'robot_scr_ptr'

see 90f4+


robot_var6 $5a ----------------------
i guess this is the X position & 0x07 .. or at least some 0-7 counter
it gets subtracted from when it's moving left
and gets added to when it's moving right

seems to get added or subtracted by $4d only
$4d is a bit mystic.. seems to be 1 or 2 most of the time




; entry point for robot behaviour code


; counter++
    .C:8eca   E6 44      INC $44            
    
; $4a = $4e = $4f = 0
    .C:8ecc   A9 00      LDA #$00           
    .C:8ece   85 4A      STA $4A
    .C:8ed0   85 4E      STA $4E
    .C:8ed2   85 4F      STA $4F

; // handle snooze.. if snooze_counter is set to 0 
; // it will wait 1024 'frames' before robots "wake up"
; if (snooze_counter != 0xff)
    .C:8ed4   A5 47      LDA $47            
    .C:8ed6   C9 FF      CMP #$FF
    .C:8ed8   F0 09      BEQ $8EE3
    
; {
; if((counter2 && 0x03) == 0) snooze_counter++
    .C:8eda   A5 E0      LDA $E0
    .C:8edc   29 03      AND #$03
    .C:8ede   D0 02      BNE $8EE2
    .C:8ee0   E6 47      INC $47        ; snooze_counter ++
; return;
    .C:8ee2   60         RTS            
; }

; if (robot_count6 && 0x80) return
    .C:8ee3   A6 54      LDX $54        
    .C:8ee5   30 FB      BMI $8EE2
    
; set_robot_color()
    .C:8ee7   20 07 92   JSR $9207      
    
; sound1a()
    .C:8eea   20 44 92   JSR $9244      

; robot_idx1 <- robot_count6 / 6
; /// $48 = $54/6 = robot_count6/6 = robot_idx1
; // sets robot_idx1:$48 to robot_count6 divided with 6
    .C:8eed   8A         TXA		; A = robot_count6:$54 (see LDX above)
    .C:8eee   A0 FF      LDY #$FF
    .C:8ef0   38         SEC
    .C:8ef1   C8         INY
    .C:8ef2   E9 06      SBC #$06
    .C:8ef4   B0 FB      BCS $8EF1	; (loop)
    .C:8ef6   84 48      STY $48

; $49 = ($54/6)*2 = robot_count6/3 = robot_idx2
; robot_idx2 = robot_idx1 * 2
    .C:8ef8   98         TYA
    .C:8ef9   0A         ASL A
    .C:8efa   85 49      STA $49

; if(robot_var3 == 0xff)
;// note load from address $57 + robot_count6 -- pseudo: robot_var3 = robots[i].var3
; :REENTRY
    .C:8efc   B5 57      LDA $57,X ;A=robot_var3
    .C:8efe   C9 FF      CMP #$FF
    .C:8f00   D0 09      BNE $8F0B
;{
; :p6
; robot_var3 = lookup[robot_var1++]
    .C:8f02   B4 55      LDY $55,X      ; temp <- robot_var1
    .C:8f04   F6 55      INC $55,X      ; robot_var1++
    .C:8f06   B9 12 21   LDA $2112,Y    ; robot_var3 <- $2112,temp = lookup[temp]
    .C:8f09   95 57      STA $57,X
;}


; // (Y <- A=robot_var3)
    .C:8f0b   A8         TAY            ; :REENTRY2 // see 2 LDAs above
    
    
;if(!(robot_var3 & 0x80)) { goto :p4 }
    .C:8f0c   30 03      BMI $8F11
    .C:8f0e   4C AC 90   JMP $90AC      ; goto p4:


;else if(robot_var3 & 0x40)
    .C:8f11   0A         ASL A
    .C:8f12   10 11      BPL $8F25
;{
    .C:8f14   0A         ASL A          ; (carry = robot_var3 & 0x20)
    .C:8f15   0A         ASL A		; ...
    
    .C:8f16   98         TYA		; (A = robot_var3 & 0x3f -- see TAY above)
    .C:8f17   29 3F      AND #$3F	; ...
    
    .C:8f19   90 02      BCC $8F1D      ; if(robot_var3 & 0x20) A |= 0xc0
    .C:8f1b   09 C0      ORA #$C0
    
    .C:8f1d   18         CLC
; robot_var1 += robot_var3 & 0x20 ? ((robot_var3 & 0x3f) | 0xc0) : (robot_var3 & 0x3f)
    .C:8f1e   75 55      ADC $55,X
    .C:8f20   95 55      STA $55,X
    
; goto :p6
    .C:8f22   4C 02 8F   JMP $8F02
;}


;else if(robot_var3 & 0x20) goto p3:
    .C:8f25   0A         ASL A          
    .C:8f26   10 03      BPL $8F2B
    .C:8f28   4C A0 90   JMP $90A0      ; goto p3:

;else if(!(robot_var3 & 0x10) goto p2:
    .C:8f2b   0A         ASL A
    .C:8f2c   30 03      BMI $8F31
    .C:8f2e   4C 5B 90   JMP $905B      ; goto p2:

;else if(robot_var3 & 0x08) goto p5:
    .C:8f31   0A         ASL A
    .C:8f32   10 03      BPL $8F37
    .C:8f34   4C D7 8F   JMP $8FD7      ; goto p5:

;else if(!(robot_var3 & 0x04)) goto p1:
    .C:8f37   0A         ASL A
    .C:8f38   30 03      BMI $8F3D
    .C:8f3a   4C 47 90   JMP $9047      ; goto p1:
    
; else 
;sound3()
    .C:8f3d   20 65 92   JSR $9265      

    .C:8f40   E6 4F      INC $4F        ; $4f++
    
;if((counter2&0x1f)==0)
    .C:8f42   A5 E0      LDA $E0        ; A=counter2
    .C:8f44   29 1F      AND #$1F
    .C:8f46   D0 0E      BNE $8F56
;{
; if((robot_var3--) < 0x94) {
    .C:8f48   88         DEY		; Y is 
    .C:8f49   94 57      STY $57,X
    .C:8f4b   C0 94      CPY #$94
    .C:8f4d   B0 07      BCS $8F56
;  robot_var3 = 0xff
    .C:8f4f   A9 FF      LDA #$FF       ; :p7
    .C:8f51   95 57      STA $57,X
; goto AGAIN // updates counters and repeats from REENTRY
    .C:8f53   4C C2 91   JMP $91C2
; }
;}

;if((counter2&0x03) != robot_idx1) goto AGAIN // probably to split out "load"? one robot at a time?
    .C:8f56   29 03      AND #$03
    .C:8f58   C5 48      CMP $48
    .C:8f5a   D0 F7      BNE $8F53      ; goto AGAIN // (branches to JMP above)

 
    .C:8f5c   E6 4E      INC $4E        ; $4e++
    
    .C:8f5e   A4 48      LDY $48
    .C:8f60   B9 FC 43   LDA $43FC,Y    ; A=$43FC[robot_idx1]
    
    .C:8f63   A0 09      LDY #$09	; Y = 0x9

;if($43FC[robot_idx1] != 0xc0)
    .C:8f65   C9 C0      CMP #$C0 	; if A != 0xc0
    .C:8f67   F0 06      BEQ $8F6F	; ...
;{
    .C:8f69   A0 EA      LDY #$EA	;Y=0xEA

; if($43FC[robot_idx1] != 0xc0) { robot_var3 = 0xff; goto AGAIN }
    .C:8f6b   C9 C6      CMP #$C6	;if(A!=0xc6) {robot_var3==0xff; goto AGAIN}
    .C:8f6d   D0 E0      BNE $8F4F	; goto p7
;}

; // sprite position magick, here be 6502 dragons
; four_d = $43FC[robot_idx1] == 0xc0 ? 0x09 (9) : 0xea (-22)
    .C:8f6f   84 4D      STY $4D        ; $4d=Y 

    .C:8f71   18         CLC		; XXX why clear carry here?
    
    .C:8f72   A4 48      LDY $48 	; Y <- robot_idx1
    .C:8f74   B9 6C 0E   LDA $0E6C,Y	; A <- $0E6C[robot_idx1]
    .C:8f77   2D 10 D0   AND $D010      ; sprite x, most significant bit
    .C:8f7a   F0 01      BEQ $8F7D
    .C:8f7c   38         SEC
    .C:8f7d   A4 49      LDY $49
    .C:8f7f   B9 08 D0   LDA $D008,Y    ; A = sprite X position (for current robot, i.e. robot_idx(1,2))
    .C:8f82   6A         ROR A		; A <- sprite X position / 2 (carry is rotated into MSB if set in $D010)
    .C:8f83   08         PHP		; (store all flags)
    .C:8f84   18         CLC
    .C:8f85   65 4D      ADC $4D	; A += four_d // see above
    .C:8f87   28         PLP		; (restore all flags, carry is of interest here)
    .C:8f88   2A         ROL A		; A <- sprite X position, with MSB 9th bit in carry
    .C:8f89   8D 4A 03   STA $034A	; XXX wtf is at this position?! seems to be code modification, see JSR below

    .C:8f8c   AD 10 D0   LDA $D010
    .C:8f8f   90 05      BCC $8F96
    .C:8f91   09 01      ORA #$01
    .C:8f93   4C 98 8F   JMP $8F98
    .C:8f96   29 FE      AND #$FE
    .C:8f98   8D 10 D0   STA $D010      ; set lazer MSB Xpos bit to the same as robot

    .C:8f9b   20 40 03   JSR $0340	; call SUB1

    .C:8f9e   B9 09 D0   LDA $D009,Y    ; A=sprite Y position
    .C:8fa1   8D 01 D0   STA $D001      ; sprite 0 Y = A ; set lazer Y position to the same as robot's
    .C:8fa4   20 D6 82   JSR $82D6	; call SUB2
    .C:8fa7   29 03      AND #$03
    .C:8fa9   18         CLC
    .C:8faa   69 14      ADC #$14
    .C:8fac   8D F8 43   STA $43F8	; XXX what is this?
    .C:8faf   A0 01      LDY #$01
    .C:8fb1   A5 E0      LDA $E0        ; A=counter2
    .C:8fb3   29 04      AND #$04
    .C:8fb5   D0 02      BNE $8FB9
    
    .C:8fb7   A0 06      LDY #$06       ; sprite 0 color = 0x06 (blue)
    .C:8fb9   8C 27 D0   STY $D027      
    
    .C:8fbc   AD 1D D0   LDA $D01D      ; expand sprite 0 2x horizontally = 1?
    .C:8fbf   09 01      ORA #$01
    .C:8fc1   8D 1D D0   STA $D01D
    
    .C:8fc4   AD 15 D0   LDA $D015      ; sprite display enable = 1?
    .C:8fc7   09 01      ORA #$01
    .C:8fc9   8D 15 D0   STA $D015
    
    .C:8fcc   AD 1C D0   LDA $D01C      ; set sprites 1-7 to multicolor mode?
    .C:8fcf   29 FE      AND #$FE
    .C:8fd1   8D 1C D0   STA $D01C
    
    .C:8fd4   4C C2 91   JMP $91C2      ; goto AGAIN

; sprite positions dragons END
    

; :p5
; if(!(robot_var3 & 0x04)) {
    .C:8fd7   0A         ASL A
    .C:8fd8   30 5D      BMI $9037

;   if(robot_var3 & 0x02) {
    .C:8fda   0A         ASL A
    .C:8fdb   10 50      BPL $902D

    .C:8fdd   0A         ASL A
    .C:8fde   48         PHA		; save A (which is now either 0x80 or 0x00?)

    .C:8fdf   A4 49      LDY $49
    .C:8fe1   B9 08 D0   LDA $D008,Y
    .C:8fe4   85 4D      STA $4D	; $4d <- robot's X position

    .C:8fe6   A4 48      LDY $48
    .C:8fe8   18         CLC
    .C:8fe9   B9 6C 0E   LDA $0E6C,Y
    .C:8fec   2D 10 D0   AND $D010
    .C:8fef   F0 01      BEQ $8FF2
    .C:8ff1   38         SEC		; below carry equals robot's 9th bit of X position
    .C:8ff2   66 4D      ROR $4D	; $4d <- robot's X position / 2

    .C:8ff4   AD 10 D0   LDA $D010      ; sprite x, most significant bit
    .C:8ff7   4A         LSR A
    .C:8ff8   4A         LSR A		; carry <- hero's 9th x position bit
    .C:8ff9   AD 02 D0   LDA $D002      ; A=sprite 1 X pos
    .C:8ffc   6A         ROR A		; A is now hero's X position / 2

    .C:8ffd   C5 4D      CMP $4D	; compare hero X with robot X, carry = hero_x >= robot_x

    .C:8fff   66 4D      ROR $4D	;
    .C:9001   B9 FC 43   LDA $43FC,Y    ; A=$43Fc[robot_idx1]
    .C:9004   C9 C3      CMP #$C3	; carry <- $43Fc[robot_idx1] >= 0xc3
    .C:9006   6A         ROR A
    .C:9007   45 4D      EOR $4D
    .C:9009   85 4D      STA $4D	; four_d = ...

    .C:900b   A4 49      LDY $49
    .C:900d   B9 09 D0   LDA $D009,Y    ; A=robot's Y position
    .C:9010   38         SEC
    .C:9011   ED 07 D0   SBC $D007      ; A-=sprite 3 Y (hero)
    .C:9014   B0 04      BCS $901A

    .C:9016   49 FF      EOR #$FF
    .C:9018   69 01      ADC #$01	

    .C:901a   C9 14      CMP #$14	; NOTE I suppose this compares absolute y distance from robot to hero
    .C:901c   6A         ROR A
    .C:901d   49 80      EOR #$80
    .C:901f   25 4D      AND $4D
    .C:9021   85 4D      STA $4D
    .C:9023   68         PLA		; restore A
    .C:9024   45 4D      EOR $4D
    .C:9026   10 02      BPL $902A
    .C:9028   F6 55      INC $55,X	; << THIS IS THE YIELD robot_var1++
    .C:902a   4C 02 8F   JMP $8F02	; goto :p6
;   } else {
    .C:902d   0A         ASL A
    .C:902e   55 56      EOR $56,X
    .C:9030   30 02      BMI $9034
    .C:9032   F6 55      INC $55,X
    .C:9034   4C 02 8F   JMP $8F02	; goto :p6
;   }
; } else {
    
    robot_var3 = 0xff
    .C:9037   A9 FF      LDA #$FF       
    .C:9039   95 57      STA $57,X
    .C:903b   20 D6 82   JSR $82D6	; call SUB2
    .C:903e   24 EB      BIT $EB
    .C:9040   50 02      BVC $9044
    .C:9042   F6 55      INC $55,X	; if bit 6 of $EB is set: robot_var1++
    .C:9044   4C 02 8F   JMP $8F02	; goto :p6
; }

    
:p1
;$4d = robot_var3 & 0x03
    .C:9047   98         TYA
    .C:9048   29 03      AND #$03
    .C:904a   85 4D      STA $4D
    
;robot_var2 = (robot_var2&0xfc) | $4d
    .C:904c   B5 56      LDA $56,X
    .C:904e   29 FC      AND #$FC
    .C:9050   05 4D      ORA $4D
    .C:9052   95 56      STA $56,X

;robot_var3 = 0xff
    .C:9054   A9 FF      LDA #$FF
    .C:9056   95 57      STA $57,X
    .C:9058   4C C2 91   JMP $91C2      ; goto AGAIN



:p2
;$4d = sprite 1 X / 2 //(msb taken into account too)
    .C:905b   AD 10 D0   LDA $D010      ; A=sprite 0-7 X most significant bit
    .C:905e   4A         LSR A
    .C:905f   4A         LSR A
    .C:9060   AD 02 D0   LDA $D002      ; A=sprite 1 X
    .C:9063   6A         ROR A
    .C:9064   85 4D      STA $4D

; temp = sprite (4+robot index) X/2 (MSB taken into account)
    .C:9066   18         CLC
    .C:9067   A4 48      LDY $48
    .C:9069   B9 6C 0E   LDA $0E6C,Y
    .C:906c   2D 10 D0   AND $D010      ; sprite 0-7 X most significant bit
    .C:906f   F0 01      BEQ $9072
    .C:9071   38         SEC
    .C:9072   A4 49      LDY $49
    .C:9074   B9 08 D0   LDA $D008,Y    
    .C:9077   6A         ROR A

; temp_4d=$4d
; if(temp >=$4d) robot_var3=(robot_var3&0x0f)|0x20; else robot_var3=(robot_var3&0x0f);
    .C:9078   C5 4D      CMP $4D
    .C:907a   B5 57      LDA $57,X
    .C:907c   29 0F      AND #$0F
    .C:907e   90 02      BCC $9082
    .C:9080   09 20      ORA #$20
    .C:9082   95 57      STA $57,X

; $4d = $43fc,robot_idx1
    .C:9084   A4 48      LDY $48
    .C:9086   B9 FC 43   LDA $43FC,Y    
    .C:9089   85 4D      STA $4D
    
; //(carry untouched, see previous if() )
; if((temp >= temp_4d)) {if($4d != 0xc6) robot_var3=0x45} 
;  else {if($4d != 0xc0) robot_var3=0x65}
    .C:908b   A0 C0      LDY #$C0       ;<
    .C:908d   A9 65      LDA #$65
    .C:908f   90 04      BCC $9095
    .C:9091   A0 C6      LDY #$C6       ;>
    .C:9093   A9 45      LDA #$45
    .C:9095   C4 4D      CPY $4D
    .C:9097   F0 02      BEQ $909B
    .C:9099   95 57      STA $57,X
    .C:909b   B5 57      LDA $57,X
; goto REENTRY2
    .C:909d   4C 0B 8F   JMP $8F0B
    
    
    
:p3
;if((counter&0x03) == 0) check_for_end_of_cycle()
    .C:90a0   A5 44      LDA $44        ; A=counter
    .C:90a2   29 03      AND #$03
    .C:90a4   D0 03      BNE $90A9
    .C:90a6   20 89 92   JSR $9289      ; check_for_end_of_cycle()
; goto AGAIN
    .C:90a9   4C C2 91   JMP $91C2      ; goto AGAIN

:p4
;if((robot_var3 & 0x40)==0)
    .C:90ac   0A         ASL A          
    .C:90ad   10 42      BPL $90F1
;{

    .C:90af   0A         ASL A
    .C:90b0   08         PHP
    .C:90b1   20 20 92   JSR $9220      ; sound1()
; if(counter&0x03) goto AGAIN
    .C:90b4   A5 44      LDA $44        ; A=counter
    .C:90b6   29 03      AND #$03
    .C:90b8   F0 04      BEQ $90BE
    .C:90ba   28         PLP
    .C:90bb   4C C2 91   JMP $91C2      ; goto AGAIN
    
; check_for_end_of_cycle()
    .C:90be   20 89 92   JSR $9289      ; check_for_end_of_cycle()
    .C:90c1   A4 48      LDY $48
    .C:90c3   B9 FC 43   LDA $43FC,Y    ; A=$43fc,robot_idx1
    .C:90c6   28         PLP

; // (carry restored from 90b0)
;if(robot_var3 & 0x40 == 0) 
    .C:90c7   10 14      BPL $90DD
;{

if($43fc,robot_idx1 == 0xc0)
    .C:90c9   C9 C0      CMP #$C0
    .C:90cb   D0 07      BNE $90D4
;{robot_var3=0xff; goto AGAIN}
    .C:90cd   A9 FF      LDA #$FF
    .C:90cf   95 57      STA $57,X
    .C:90d1   4C C2 91   JMP $91C2      ; goto AGAIN   
;else{$43fc,robot_idx1 --; goto AGAIN}
    .C:90d4   38         SEC
    .C:90d5   E9 01      SBC #$01
    .C:90d7   99 FC 43   STA $43FC,Y    ; $43fc,robot_idx1=A
    .C:90da   4C C2 91   JMP $91C2      ; goto AGAIN
;}

if($43fc,robot_idx1 == 0xc6) {robot_var3=0xff; goto AGAIN}
    .C:90dd   C9 C6      CMP #$C6
    .C:90df   D0 07      BNE $90E8
    .C:90e1   A9 FF      LDA #$FF
    .C:90e3   95 57      STA $57,X
    .C:90e5   4C C2 91   JMP $91C2      ; goto AGAIN
    
;$43fc,robot_idx1++;
    .C:90e8   18         CLC
    .C:90e9   69 01      ADC #$01
    .C:90eb   99 FC 43   STA $43FC,Y    ; $43fc,robot_idx1=A
;goto AGAIN
    .C:90ee   4C C2 91   JMP $91C2      ; goto AGAIN
;}
    .C:90f1   20 89 92   JSR $9289      ; check_for_end_of_cycle()
    
; scr_ptr = robot_scr_ptr
    .C:90f4   B5 58      LDA $58,X
    .C:90f6   85 45      STA $45        ;scr_ptr =..
    .C:90f8   B5 59      LDA $59,X
    .C:90fa   85 46      STA $46
    
if((robot_var2 & 0x03) != 0)
    .C:90fc   B5 56      LDA $56,X
    .C:90fe   29 03      AND #$03
    .C:9100   F0 0F      BEQ $9111
{
    .C:9102   38         SEC
    .C:9103   E9 01      SBC #$01
    .C:9105   D0 0A      BNE $9111
    .C:9107   A5 E0      LDA $E0        ;A=counter2
    .C:9109   4A         LSR A
    .C:910a   90 03      BCC $910F
    .C:910c   4C C2 91   JMP $91C2      ; goto AGAIN
    .C:910f   A9 01      LDA #$01
}    
    .C:9111   85 4D      STA $4D
    .C:9113   16 56      ASL $56,X
    .C:9115   56 56      LSR $56,X
    .C:9117   98         TYA
    .C:9118   0A         ASL A
    .C:9119   0A         ASL A
    .C:911a   10 53      BPL $916F
    .C:911c   A0 FF      LDY #$FF
    .C:911e   C6 46      DEC $46
    .C:9120   B1 45      LDA ($45),Y    ; A=*scr_ptr
    .C:9122   E6 46      INC $46
    .C:9124   C9 45      CMP #$45
    .C:9126   F0 25      BEQ $914D
    .C:9128   C9 46      CMP #$46
    .C:912a   F0 21      BEQ $914D
    .C:912c   A5 3F      LDA $3F
    .C:912e   C9 0F      CMP #$0F
    .C:9130   D0 18      BNE $914A
    .C:9132   A5 45      LDA $45        ; A=scr_ptr
    .C:9134   85 7C      STA $7C
    .C:9136   A4 46      LDY $46
    .C:9138   88         DEY
    .C:9139   84 7D      STY $7D
    .C:913b   A0 FF      LDY #$FF
    .C:913d   20 82 94   JSR $9482	; call SUB3
    .C:9140   90 08      BCC $914A
    .C:9142   C9 45      CMP #$45
    .C:9144   F0 07      BEQ $914D
    .C:9146   C9 46      CMP #$46
    .C:9148   F0 03      BEQ $914D
    .C:914a   4C FB 91   JMP $91FB	; goto px1
    .C:914d   B5 5A      LDA $5A,X
    .C:914f   38         SEC
    .C:9150   E5 4D      SBC $4D
    .C:9152   B0 0A      BCS $915E
    .C:9154   B4 58      LDY $58,X
    .C:9156   D0 02      BNE $915A
    .C:9158   D6 59      DEC $59,X
    .C:915a   D6 58      DEC $58,X
    .C:915c   69 08      ADC #$08
    .C:915e   95 5A      STA $5A,X
    .C:9160   A4 49      LDY $49
    .C:9162   B9 08 D0   LDA $D008,Y    ; A = sprite 4 x pos
    .C:9165   38         SEC
    .C:9166   E5 4D      SBC $4D
    .C:9168   99 08 D0   STA $D008,Y    ; sprite 4 x pos = A
    .C:916b   B0 55      BCS $91C2      ; goto AGAIN
    .C:916d   90 47      BCC $91B6
    .C:916f   A0 01      LDY #$01
    .C:9171   B1 45      LDA ($45),Y    ;A=*scr_ptr
    .C:9173   C9 45      CMP #$45
    .C:9175   F0 1F      BEQ $9196
    .C:9177   C9 46      CMP #$46
    .C:9179   F0 1B      BEQ $9196
    .C:917b   A5 3F      LDA $3F
    .C:917d   C9 0F      CMP #$0F
    .C:917f   D0 7A      BNE $91FB	; branch px1
    .C:9181   A5 45      LDA $45        ;A=scr_ptr
    .C:9183   85 7C      STA $7C
    .C:9185   A5 46      LDA $46
    .C:9187   85 7D      STA $7D
    .C:9189   20 82 94   JSR $9482	; call SUB3
    .C:918c   90 6D      BCC $91FB	; branch px1
    .C:918e   C9 45      CMP #$45
    .C:9190   F0 04      BEQ $9196
    .C:9192   C9 46      CMP #$46
    .C:9194   D0 65      BNE $91FB	; branch px1
    .C:9196   B5 5A      LDA $5A,X
    .C:9198   18         CLC
    .C:9199   65 4D      ADC $4D
    .C:919b   C9 08      CMP #$08
    .C:919d   90 08      BCC $91A7
    .C:919f   E9 08      SBC #$08
    .C:91a1   F6 58      INC $58,X
    .C:91a3   D0 02      BNE $91A7
    .C:91a5   F6 59      INC $59,X
    .C:91a7   95 5A      STA $5A,X
    .C:91a9   A4 49      LDY $49
    .C:91ab   B9 08 D0   LDA $D008,Y    ; A=sprite 4+robot index
    .C:91ae   18         CLC
    .C:91af   65 4D      ADC $4D
    .C:91b1   99 08 D0   STA $D008,Y    ; sprite 4+robot index=A
    .C:91b4   90 0C      BCC $91C2      ; goto AGAIN       
    .C:91b6   98         TYA
    .C:91b7   4A         LSR A
    .C:91b8   A8         TAY
    .C:91b9   AD 10 D0   LDA $D010      ; A=sprite 0-7 MSB
    .C:91bc   59 6C 0E   EOR $0E6C,Y
    .C:91bf   8D 10 D0   STA $D010      ; sprite 0-7 MSB=A

; :AGAIN ********************
;robot_idx1--; robot_idx2-=2
    .C:91c2   C6 48      DEC $48 ; $48--
    .C:91c4   C6 49      DEC $49 ; $49-=2
    .C:91c6   C6 49      DEC $49
    
; decrement robot_var pointer thingy (-6 actually because there are 6 robot_var bytes)
    .C:91c8   8A         TXA
    .C:91c9   38         SEC
    .C:91ca   E9 06      SBC #$06
    .C:91cc   AA         TAX

; if(robot_idx6>=0) goto REENTRY
    .C:91cd   90 03      BCC $91D2
    .C:91cf   4C FC 8E   JMP $8EFC      ; goto REENTRY
    
; else{
    .C:91d2   A5 4A      LDA $4A        ; sound stuff follows (or..?)
    .C:91d4   D0 05      BNE $91DB
    .C:91d6   A9 00      LDA #$00
    .C:91d8   8D 0B D4   STA $D40B      ; release voice #2
    .C:91db   A5 4E      LDA $4E
    .C:91dd   D0 1B      BNE $91FA
    .C:91df   A5 4F      LDA $4F
    .C:91e1   D0 0B      BNE $91EE
    .C:91e3   A5 3F      LDA $3F
    .C:91e5   C9 0F      CMP #$0F
    .C:91e7   D0 05      BNE $91EE
    .C:91e9   A9 00      LDA #$00
    .C:91eb   8D 12 D4   STA $D412
    .C:91ee   A5 6D      LDA $6D
    .C:91f0   10 08      BPL $91FA
    .C:91f2   AD 15 D0   LDA $D015	
    .C:91f5   29 FE      AND #$FE
    .C:91f7   8D 15 D0   STA $D015	; turn off sprite 0 (lazer)
    .C:91fa   60         RTS            ; return
;}
    
    
; :px1
    .C:91fb   B5 56      LDA $56,X
    .C:91fd   09 80      ORA #$80
    .C:91ff   95 56      STA $56,X
    .C:9201   A9 FF      LDA #$FF
    .C:9203   95 57      STA $57,X
    .C:9205   D0 BB      BNE $91C2      ; goto AGAIN ("BRanch Always"?)
    
    
; // flash thingies light on robots between white(1) and cyan(3)
; // (or possible other colors stored in $4b and $4c)
; set_robot_color(){
;if ($dc == 0)
    .C:9207   A5 DC      LDA $DC
    .C:9209   D0 14      BNE $921F
;{

;if ((counter2 && 0x08)==0) Y=0 else Y=1
    .C:920b   A0 00      LDY #$00
    .C:920d   A5 E0      LDA $E0
    .C:920f   29 08      AND #$08
    .C:9211   D0 01      BNE $9214
    .C:9213   C8         INY
    
; sprite 4,5,6,7 color = $4b+y
    .C:9214   B9 4B 00   LDA $004B,Y
    .C:9217   A0 03      LDY #$03
    .C:9219   99 2B D0   STA $D02B,Y
    .C:921c   88         DEY
    .C:921d   10 FA      BPL $9219
;}

; return
    .C:921f   60         RTS
;}


    
; sound1(){
    .C:9220   A5 E1      LDA $E1
    .C:9222   0A         ASL A
    .C:9223   49 20      EOR #$20
    .C:9225   8D 08 D4   STA $D408
    .C:9228   A9 00      LDA #$00
    .C:922a   8D 07 D4   STA $D407
    .C:922d   8D 0C D4   STA $D40C
    .C:9230   8D 09 D4   STA $D409
    .C:9233   A9 40      LDA #$40
    .C:9235   8D 0D D4   STA $D40D
    .C:9238   A9 0E      LDA #$0E
    .C:923a   8D 0A D4   STA $D40A
    .C:923d   A9 11      LDA #$11
    .C:923f   8D 0B D4   STA $D40B	; start voice #2, sawtooth
    .C:9242   E6 4A      INC $4A

; sound1a(){
; VOC1: freq. control msb = $e3>>1
    .C:9244   A5 E3      LDA $E3        
    .C:9246   4A         LSR A
    .C:9247   8D 01 D4   STA $D401
    
; voice1 params = 0
    .C:924a   A9 00      LDA #$00
    .C:924c   8D 00 D4   STA $D400
    .C:924f   8D 05 D4   STA $D405
    .C:9252   8D 02 D4   STA $D402
    
    .C:9255   A9 08      LDA #$08
    .C:9257   8D 03 D4   STA $D403
    
    .C:925a   A9 40      LDA #$40
    .C:925c   8D 06 D4   STA $D406
    
    .C:925f   A9 41      LDA #$41
    .C:9261   8D 04 D4   STA $D404
; return
    .C:9264   60         RTS
; }
    


    
; sound3() {
    .C:9265   A9 00      LDA #$00
    .C:9267   8D 13 D4   STA $D413
    .C:926a   8D 10 D4   STA $D410
    .C:926d   A5 E0      LDA $E0        ; A=counter2
    .C:926f   4A         LSR A
    .C:9270   4A         LSR A
    .C:9271   4A         LSR A
    .C:9272   4A         LSR A
    .C:9273   8D 11 D4   STA $D411
    .C:9276   A9 C0      LDA #$C0
    .C:9278   8D 14 D4   STA $D414
    .C:927b   A9 04      LDA #$04
    .C:927d   8D 0F D4   STA $D40F
    .C:9280   8D 0E D4   STA $D40E
    .C:9283   A9 41      LDA #$41
    .C:9285   8D 12 D4   STA $D412
    .C:9288   60         RTS
; }
    
; //when a robot is finished with its current job, set robot_var3 to 0xff
; check_for_end_of_cycle()
; robot_var3--
    .C:9289   B5 57      LDA $57,X
    .C:928b   D6 57      DEC $57,X
; if((robot_var3 & 0x1f)==0) robot_var3=0xff
    .C:928d   29 1F      AND #$1F
    .C:928f   D0 04      BNE $9295
    .C:9291   A9 FF      LDA #$FF
    .C:9293   95 57      STA $57,X
; return
    .C:9295   60         RTS
    
    



SUB1:
    .C:0340   A4 48      LDY $48
    .C:0342   B9 FC 43   LDA $43FC,Y
    .C:0345   C9 C6      CMP #$C6
    .C:0347   F0 08      BEQ $0351 ; XXX missing dump of branch destination
    .C:0349   A9 00      LDA #$00 ; << this byte at 034A is modified from .C:8f89!
    .C:034b   8D 00 D0   STA $D000 ; lazer X position <- "argument" from caller
    .C:034e   A4 49      LDY $49
    .C:0350   60         RTS
    .

SUB2:
    .C:82d6   A5 EB      LDA $EB
    .C:82d8   4A         LSR A
    .C:82d9   4A         LSR A
    .C:82da   E5 EB      SBC $EB
    .C:82dc   4A         LSR A
    .C:82dd   26 EC      ROL $EC
    .C:82df   66 EB      ROR $EB
    .C:82e1   A5 EB      LDA $EB
    .C:82e3   4D 12 D0   EOR $D012
    .C:82e6   60         RTS
    
SUB3:
    .C:9482   A5 3F      LDA $3F
    .C:9484   C9 0F      CMP #$0F
    .C:9486   D0 51      BNE $94D9
    .C:9488   98         TYA
    .C:9489   18         CLC
    .C:948a   65 7C      ADC $7C
    .C:948c   85 72      STA $72
    .C:948e   A5 7D      LDA $7D
    .C:9490   69 00      ADC #$00
    .C:9492   85 73      STA $73
    .C:9494   A5 72      LDA $72
    .C:9496   38         SEC
    .C:9497   E5 10      SBC $10
    .C:9499   85 72      STA $72
    .C:949b   A5 73      LDA $73
    .C:949d   E5 11      SBC $11
    .C:949f   D0 38      BNE $94D9
    .C:94a1   A5 72      LDA $72
    .C:94a3   30 34      BMI $94D9
    .C:94a5   A0 00      LDY #$00
    .C:94a7   C9 08      CMP #$08
    .C:94a9   90 1A      BCC $94C5
    .C:94ab   A0 08      LDY #$08
    .C:94ad   E9 28      SBC #$28
    .C:94af   90 28      BCC $94D9
    .C:94b1   C9 08      CMP #$08
    .C:94b3   90 10      BCC $94C5
    .C:94b5   A0 10      LDY #$10
    .C:94b7   E9 28      SBC #$28
    .C:94b9   90 1E      BCC $94D9
    .C:94bb   C9 08      CMP #$08
    .C:94bd   90 06      BCC $94C5
    .C:94bf   A0 18      LDY #$18
    .C:94c1   E9 28      SBC #$28
    .C:94c3   90 14      BCC $94D9
    .C:94c5   85 72      STA $72
    .C:94c7   98         TYA
    .C:94c8   18         CLC
    .C:94c9   65 72      ADC $72
    .C:94cb   A8         TAY
    .C:94cc   B9 00 C1   LDA $C100,Y
    .C:94cf   C9 45      CMP #$45
    .C:94d1   90 06      BCC $94D9
    .C:94d3   C9 52      CMP #$52
    .C:94d5   B0 02      BCS $94D9
    .C:94d7   38         SEC
    .C:94d8   60         RTS
    .C:94d9   18         CLC
    .C:94da   60         RTS














INTERRUPT ENTRY POINT ($FFFE -> #$82e7)
.C:82e7   48         PHA
.C:82e8   D8         CLD

; $d019 <- $d099 does the following:
; Acknowledge raster interrupt (if occurred)
; Acknowledge sprite-background collision interrupt. (if occurred)
; Acknowledge sprite-sprite collision interrupt. (if occurred)
; Acknowledge light pen interrupt. (if occurred)
.C:82e9   AD 19 D0   LDA $D019
.C:82ec   8D 19 D0   STA $D019  ; ack

.C:82ef   AD 12 D0   LDA $D012
.C:82f2   C9 F0      CMP #$F0
.C:82f4   90 77      BCC $836D  ; if current_raster_line < 0xf0: goto 836d

if(!is_room) {
.C:82f6   A5 1A      LDA $1A    ; if not in shaft, jump to :p1
.C:82f8   D0 30      BNE $832A

irq at raster line 0xaa
.C:82fa   A9 AA      LDA #$AA
.C:82fc   8D 12 D0   STA $D012

Background color <- 0xc
.C:82ff   A9 0C      LDA #$0C
.C:8301   8D 21 D0   STA $D021
Extra background color #1 <- $21
.C:8304   A5 21      LDA $21
.C:8306   8D 22 D0   STA $D022
Extra background color #2 <- $22
.C:8309   A5 22      LDA $22
.C:830b   8D 23 D0   STA $D023

set chr mem <- ($4000) + $800
.C:830e   AD 18 D0   LDA $D018
.C:8311   29 F0      AND #$F0
.C:8313   09 02      ORA #$02
.C:8315   8D 18 D0   STA $D018

.C:8318   A5 A4      LDA $A4
.C:831a   F0 45      BEQ $8361
.C:831c   C6 A4      DEC $A4
.C:831e   D0 41      BNE $8361
.C:8320   A9 08      LDA #$08
.C:8322   8D 0B D4   STA $D40B
.C:8325   8D 12 D4   STA $D412
.C:8328   10 37      BPL $8361

; :p1 
.C:832a   98         TYA        ; store everything         
.C:832b   48         PHA
.C:832c   8A         TXA
.C:832d   48         PHA
.C:832e   A5 7C      LDA $7C
.C:8330   48         PHA
.C:8331   A5 7D      LDA $7D
.C:8333   48         PHA
.C:8334   A5 7A      LDA $7A
.C:8336   48         PHA
.C:8337   A5 7B      LDA $7B
.C:8339   48         PHA
.C:833a   A5 79      LDA $79
.C:833c   48         PHA

.C:833d   20 FA 94   JSR $94FA  ; NOP: ??
.C:8340   20 CA 8E   JSR $8ECA  ; NOP: disable robots, except collision
.C:8343   20 C1 92   JSR $92C1  ; NOP: disable orb (both types: seeking, and 8-loop)

.C:8346   68         PLA        ; restore everything
.C:8347   85 79      STA $79
.C:8349   68         PLA
.C:834a   85 7B      STA $7B
.C:834c   68         PLA
.C:834d   85 7A      STA $7A
.C:834f   68         PLA
.C:8350   85 7D      STA $7D
.C:8352   68         PLA
.C:8353   85 7C      STA $7C
.C:8355   68         PLA
.C:8356   AA         TAX
.C:8357   68         PLA
.C:8358   A8         TAY

.C:8359   20 78 7F   JSR $7F78  ; NOP: ??
.C:835c   A9 FF      LDA #$FF
.C:835e   8D 12 D0   STA $D012
.C:8361   E6 E0      INC $E0	; counter2++
.C:8363   E6 3E      INC $3E
.C:8365   20 98 83   JSR $8398  ; NOP: freeze time
.C:8368   20 EA 84   JSR $84EA  ; NOP: something happens to sound
.C:836b   68         PLA
.C:836c   40         RTI

836d:
.C:836d   A9 FF      LDA #$FF
.C:836f   8D 12 D0   STA $D012	; generate interrupt at raster line 0xff

if(!is_room) {
.C:8372   A5 1A      LDA $1A
.C:8374   D0 14      BNE $838A

Extra background color #1 <- 0xe
.C:8376   A9 0E      LDA #$0E
.C:8378   8D 22 D0   STA $D022
Extra background color #2 <- 0x6
.C:837b   A9 06      LDA #$06
.C:837d   8D 23 D0   STA $D023
Background color <- 0x0
.C:8380   A9 00      LDA #$00
.C:8382   8D 21 D0   STA $D021
; set char ptr offset $1800(-$1fff) to current bank ($4000) i.e. $5800-$5fff, set scr ptr offset $0 (i.e. $4000)
.C:8385   A9 06      LDA #$06
.C:8387   8D 18 D0   STA $D018
}
.C:838a   68         PLA
return;
.C:838b   40         RTI











ZERO PAGE FINAL MAP


adr     var      description
$1A     is_room  00: coridors, 01: room
$21              transferred to bg xtra color 1 when in shaft
$22              transferred to bg xtra color 2 when in shaft
